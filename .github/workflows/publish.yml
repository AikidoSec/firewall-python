name: Publish Python üêç distribution üì¶ to PyPI

on:
  release:
    types: [created]

jobs:
  tests:
    name: Linting and running tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pip install poetry
    - name: Install dependencies
      run: poetry install
    - name: Run Pylint
      run: |
        poetry run pylint --fail-under=9 --rcfile=.pylintrc aikido_firewall/
        pylint_exit_code=$?
        if [ $pylint_exit_code -ne 0 ]; then
          echo "Pylint check failed. Please fix the issues."
          exit 1
        fi

    - name: Run Black Check
      run: |
        poetry run black --check --diff aikido_firewall/
        black_exit_code=$?
        if [ $black_exit_code -ne 0 ]; then
          echo "Black check failed. Please run 'black .' to format the code."
          exit 1
        fi
    - name: Run tests
      run: |
        make test
  build:
    name: Build distribution üì¶
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Install poetry
      run: pip install poetry
    - name: Install dependencies
      run: poetry install

    - name: Build distribution packages
      run: poetry build

    - name: Store the distribution packages
      uses: actions/upload-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
  publish-to-pypi:
    name: Publish Python üêç distribution üì¶ to PyPI
    needs:
      - build
      - tests
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # IMPORTANT: mandatory for trusted publishing

    steps:
    - uses: actions/checkout@v4
    - name: Download all the dists
      uses: actions/download-artifact@v3
      with:
        name: python-package-distributions
        path: dist/
    - name: Install poetry
      run: pip install poetry
    - name: Publish to PyPI
      env:
        POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
        POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
      run: |
        poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
        poetry publish
